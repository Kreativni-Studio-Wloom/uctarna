"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testFunction = exports.generateReportPDF = exports.testAuth = void 0;
const functions = require("firebase-functions");
const admin = require("firebase-admin");
const nodemailer = require("nodemailer");
const date_fns_1 = require("date-fns");
const locale_1 = require("date-fns/locale");
admin.initializeApp();
const db = admin.firestore();
// Email konfigurace pro Seznam SMTP
const transporter = nodemailer.createTransport({
    host: 'smtp.seznam.cz',
    port: 465,
    secure: true, // SSL/TLS
    auth: {
        user: 'info@wloom.eu',
        pass: 'vokhot-nigvub-vAvfy2'
    },
    tls: {
        rejectUnauthorized: false
    }
});
// Jednoduch√° testovac√≠ funkce pro ovƒõ≈ôen√≠ autentifikace
exports.testAuth = functions.https.onCall(async (data, context) => {
    var _a, _b, _c;
    console.log('üß™ Test auth function called');
    console.log('üß™ Data:', data);
    console.log('üß™ Context:', context);
    console.log('üß™ Context type:', typeof context);
    console.log('üß™ Context keys:', Object.keys(context || {}));
    // Zkus naj√≠t auth kontext
    let auth = null;
    if (context && typeof context === 'object') {
        // Zkus r≈Øzn√© mo≈ænosti
        auth = context.auth || ((_a = context.rawRequest) === null || _a === void 0 ? void 0 : _a.auth) || ((_b = context.request) === null || _b === void 0 ? void 0 : _b.auth);
        if (context.rawRequest) {
            console.log('üß™ Raw request keys:', Object.keys(context.rawRequest));
            console.log('üß™ Raw request auth:', context.rawRequest.auth);
        }
        if (context.request) {
            console.log('üß™ Request keys:', Object.keys(context.request));
            console.log('üß™ Request auth:', context.request.auth);
        }
    }
    console.log('üß™ Found auth:', auth);
    if (auth) {
        console.log('üß™ Auth keys:', Object.keys(auth));
        console.log('üß™ Auth UID:', auth.uid);
        console.log('üß™ Auth token:', auth.token);
        return {
            success: true,
            message: 'Autentifikace √∫spƒõ≈°n√°',
            uid: auth.uid,
            email: (_c = auth.token) === null || _c === void 0 ? void 0 : _c.email
        };
    }
    else {
        console.log('üß™ No auth found');
        return {
            success: false,
            message: 'Autentifikace nebyla nalezena',
            contextKeys: Object.keys(context || {}),
            contextType: typeof context
        };
    }
});
// Generov√°n√≠ uz√°vƒõrky - kompletnƒõ p≈ôedƒõl√°no
exports.generateReportPDF = functions.https.onCall(async (data, context) => {
    var _a;
    const functionStartTime = Date.now();
    const requestId = Math.random().toString(36).substring(7);
    console.log(`üöÄ [${requestId}] GenerateReportPDF function called at ${new Date().toISOString()}`);
    console.log(`üìä [${requestId}] Data:`, JSON.stringify(data, null, 2));
    try {
        // 1. Ovƒõ≈ôen√≠ autentifikace
        if (!context.auth) {
            console.error(`‚ùå [${requestId}] No auth context`);
            throw new functions.https.HttpsError('unauthenticated', 'U≈æivatel nen√≠ p≈ôihl√°≈°en');
        }
        const userId = context.auth.uid;
        const userEmail = (_a = context.auth.token) === null || _a === void 0 ? void 0 : _a.email;
        if (!userEmail) {
            console.error(`‚ùå [${requestId}] No user email`);
            throw new functions.https.HttpsError('invalid-argument', 'Email u≈æivatele nen√≠ k dispozici');
        }
        console.log(`‚úÖ [${requestId}] Auth successful:`, { userId, userEmail });
        // 2. Ovƒõ≈ôen√≠ parametr≈Ø
        const { storeId, period, startDate, endDate } = data;
        if (!storeId || !period || !startDate || !endDate) {
            console.error(`‚ùå [${requestId}] Missing parameters:`, { storeId, period, startDate, endDate });
            throw new functions.https.HttpsError('invalid-argument', 'Chyb√≠ povinn√© parametry');
        }
        console.log(`üè™ [${requestId}] Processing store:`, storeId, 'period:', period);
        // 3. Naƒçten√≠ prodejny
        let storeName = 'Nezn√°m√° prodejna';
        try {
            const storeDoc = await db.collection('users').doc(userId).collection('stores').doc(storeId).get();
            if (storeDoc.exists) {
                const storeData = storeDoc.data();
                storeName = (storeData === null || storeData === void 0 ? void 0 : storeData.name) || 'Nezn√°m√° prodejna';
                console.log(`‚úÖ [${requestId}] Store found:`, storeName);
            }
            else {
                console.warn(`‚ö†Ô∏è [${requestId}] Store not found, using default name`);
            }
        }
        catch (error) {
            console.warn(`‚ö†Ô∏è [${requestId}] Error loading store:`, error);
        }
        // 4. Naƒçten√≠ prodej≈Ø za obdob√≠
        let sales = [];
        try {
            const start = new Date(startDate);
            const end = new Date(endDate);
            console.log(`üìä [${requestId}] Loading sales from ${start.toISOString()} to ${end.toISOString()}`);
            const salesQuery = db.collection('users').doc(userId).collection('stores').doc(storeId).collection('sales')
                .where('createdAt', '>=', start)
                .where('createdAt', '<=', end)
                .orderBy('createdAt', 'asc');
            const salesSnapshot = await salesQuery.get();
            salesSnapshot.forEach((doc) => {
                const saleData = doc.data();
                // Zajisti, ≈æe createdAt je Date objekt
                if (saleData.createdAt && typeof saleData.createdAt.toDate === 'function') {
                    saleData.createdAt = saleData.createdAt.toDate();
                }
                sales.push(Object.assign({ id: doc.id }, saleData));
            });
            console.log(`‚úÖ [${requestId}] Found ${sales.length} sales`);
        }
        catch (error) {
            console.error(`‚ùå [${requestId}] Error loading sales:`, error);
            throw new functions.https.HttpsError('internal', `Chyba p≈ôi naƒç√≠t√°n√≠ prodej≈Ø: ${error.message}`);
        }
        // 5. V√Ωpoƒçet statistik
        const totalSales = sales.reduce((sum, sale) => sum + (sale.totalAmount || 0), 0);
        const cashSales = sales.filter(sale => sale.paymentMethod === 'cash')
            .reduce((sum, sale) => sum + (sale.totalAmount || 0), 0);
        const cardSales = sales.filter(sale => sale.paymentMethod === 'card')
            .reduce((sum, sale) => sum + (sale.totalAmount || 0), 0);
        const customerCount = sales.length;
        // 6. Vytvo≈ôen√≠ report dat
        const reportData = {
            storeName,
            period: period === 'day' ? 'Denn√≠' : 'Mƒõs√≠ƒçn√≠',
            totalSales,
            cashSales,
            cardSales,
            customerCount,
            sales,
            date: (0, date_fns_1.format)(new Date(), 'dd.MM.yyyy', { locale: locale_1.cs }),
            startDate: (0, date_fns_1.format)(new Date(startDate), 'dd.MM.yyyy', { locale: locale_1.cs }),
            endDate: (0, date_fns_1.format)(new Date(endDate), 'dd.MM.yyyy', { locale: locale_1.cs })
        };
        console.log(`‚úÖ [${requestId}] Report data calculated:`, {
            storeName: reportData.storeName,
            period: reportData.period,
            totalSales: reportData.totalSales,
            customerCount: reportData.customerCount,
            salesCount: reportData.sales.length
        });
        // 7. Odesl√°n√≠ emailu
        try {
            console.log(`üìß [${requestId}] Sending email to:`, userEmail);
            await sendReportEmail(reportData, userEmail);
            console.log(`‚úÖ [${requestId}] Email sent successfully`);
        }
        catch (emailError) {
            console.error(`‚ùå [${requestId}] Error sending email:`, emailError);
            throw new functions.https.HttpsError('internal', `Chyba p≈ôi odes√≠l√°n√≠ emailu: ${emailError.message}`);
        }
        const functionDuration = Date.now() - functionStartTime;
        console.log(`üéâ [${requestId}] Function completed successfully in ${functionDuration}ms`);
        return {
            success: true,
            message: 'Uz√°vƒõrka byla √∫spƒõ≈°nƒõ vygenerov√°na a odesl√°na na v√°≈° email!',
            data: {
                storeName: reportData.storeName,
                period: reportData.period,
                totalSales: reportData.totalSales,
                cashSales: reportData.cashSales,
                cardSales: reportData.cardSales,
                customerCount: reportData.customerCount,
                salesCount: reportData.sales.length,
                startDate: reportData.startDate,
                endDate: reportData.endDate
            },
            requestId,
            duration: functionDuration
        };
    }
    catch (error) {
        const functionDuration = Date.now() - functionStartTime;
        console.error(`üí• [${requestId}] Error in generateReportPDF after ${functionDuration}ms:`, error);
        // Pokud u≈æ je to HttpsError, hoƒè to d√°l
        if (error instanceof functions.https.HttpsError) {
            throw error;
        }
        // Jinak vytvo≈ô nov√Ω HttpsError
        const errorMessage = error.message || 'Nezn√°m√° chyba';
        throw new functions.https.HttpsError('internal', `Chyba p≈ôi generov√°n√≠ uz√°vƒõrky: ${errorMessage}`);
    }
});
// Odesl√°n√≠ emailu s reportem
async function sendReportEmail(reportData, userEmail) {
    try {
        // Seznam email≈Ø pro kopie uz√°vƒõrek
        const ccEmails = [
            'info@wloom.eu',
            // Zde m≈Ø≈æete p≈ôidat dal≈°√≠ emaily pro kopie
        ];
        // Email pro u≈æivatele
        const userMailOptions = {
            from: 'info@wloom.eu',
            to: userEmail,
            subject: `${reportData.period} uz√°vƒõrka - ${reportData.storeName}`,
            html: `
        <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="margin: 0; font-size: 24px;">${reportData.storeName}</h1>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">${reportData.period} uz√°vƒõrka - ${reportData.startDate} a≈æ ${reportData.endDate}</p>
          </div>
          
          <div style="padding: 20px; background: #f8f9fa;">
            <h2 style="color: #333; margin-top: 0;">üìä Statistiky uz√°vƒõrky</h2>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 20px 0;">
              <div style="background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <div style="font-size: 24px; font-weight: bold; color: #28a745;">${reportData.totalSales.toLocaleString('cs-CZ')} Kƒç</div>
                <div style="font-size: 14px; color: #666; margin-top: 5px;">Celkov√° tr≈æba</div>
              </div>
              
              <div style="background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <div style="font-size: 24px; font-weight: bold; color: #007bff;">${reportData.customerCount}</div>
                <div style="font-size: 14px; color: #666; margin-top: 5px;">Poƒçet z√°kazn√≠k≈Ø</div>
              </div>
              
              <div style="background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <div style="font-size: 24px; font-weight: bold; color: #ffc107;">${reportData.cashSales.toLocaleString('cs-CZ')} Kƒç</div>
                <div style="font-size: 14px; color: #666; margin-top: 5px;">Hotovost</div>
              </div>
              
              <div style="background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <div style="font-size: 24px; font-weight: bold; color: #6f42c1;">${reportData.cardSales.toLocaleString('cs-CZ')} Kƒç</div>
                <div style="font-size: 14px; color: #666; margin-top: 5px;">Karty</div>
              </div>
            </div>
            
            <h3 style="color: #333;">üìã Detailn√≠ prodeje - v≈°echny prodan√© polo≈æky</h3>
            <div style="background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
              <table style="width: 100%; border-collapse: collapse;">
                <thead>
                  <tr style="background: #f8f9fa;">
                    <th style="padding: 12px; text-align: left; border-bottom: 1px solid #dee2e6; color: #495057;">ƒåas</th>
                    <th style="padding: 12px; text-align: left; border-bottom: 1px solid #dee2e6; color: #495057;">Polo≈æky</th>
                    <th style="padding: 12px; text-align: left; border-bottom: 1px solid #dee2e6; color: #495057;">Zp≈Øsob platby</th>
                    <th style="padding: 12px; text-align: left; border-bottom: 1px solid #dee2e6; color: #495057;">ƒå√°stka</th>
                  </tr>
                </thead>
                <tbody>
                  ${reportData.sales.map((sale) => {
                var _a;
                // Zajisti, ≈æe createdAt je Date objekt
                let saleDate = sale.createdAt;
                if (sale.createdAt && typeof sale.createdAt.toDate === 'function') {
                    saleDate = sale.createdAt.toDate();
                }
                else if (typeof sale.createdAt === 'string') {
                    saleDate = new Date(sale.createdAt);
                }
                // Vytvo≈ô seznam polo≈æek
                const itemsList = ((_a = sale.items) === null || _a === void 0 ? void 0 : _a.map((item) => `${item.productName} (${item.quantity}x ${item.price} Kƒç)`).join(', ')) || '≈Ω√°dn√© polo≈æky';
                return `
                      <tr>
                        <td style="padding: 12px; border-bottom: 1px solid #dee2e6;">${(0, date_fns_1.format)(saleDate, 'dd.MM.yyyy HH:mm', { locale: locale_1.cs })}</td>
                        <td style="padding: 12px; border-bottom: 1px solid #dee2e6;">${itemsList}</td>
                        <td style="padding: 12px; border-bottom: 1px solid #dee2e6;">${sale.paymentMethod === 'cash' ? 'üíµ Hotovost' : 'üí≥ Karta'}</td>
                        <td style="padding: 12px; border-bottom: 1px solid #dee2e6; font-weight: bold;">${(sale.totalAmount || 0).toLocaleString('cs-CZ')} Kƒç</td>
                      </tr>
                    `;
            }).join('')}
                </tbody>
              </table>
            </div>
            
            <div style="background: #e9ecef; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <h4 style="color: #333; margin-top: 0;">üìä Souhrn tr≈æeb</h4>
              <p style="margin: 5px 0;"><strong>Obdob√≠:</strong> ${reportData.startDate} a≈æ ${reportData.endDate}</p>
              <p style="margin: 5px 0;"><strong>Celkov√° tr≈æba:</strong> ${reportData.totalSales.toLocaleString('cs-CZ')} Kƒç</p>
              <p style="margin: 5px 0;"><strong>Hotovost:</strong> ${reportData.cashSales.toLocaleString('cs-CZ')} Kƒç</p>
              <p style="margin: 5px 0;"><strong>Karty:</strong> ${reportData.cardSales.toLocaleString('cs-CZ')} Kƒç</p>
            </div>
          </div>
          
          <div style="background: #e9ecef; padding: 20px; text-align: center; border-radius: 0 0 10px 10px;">
            <p style="margin: 0; color: #6c757d; font-size: 12px;">
              Uz√°vƒõrka vygenerov√°na automaticky dne ${reportData.date}<br>
              <strong>√öƒçt√°rna</strong> - Profesion√°ln√≠ prodejn√≠ syst√©m
            </p>
          </div>
        </div>
      `
        };
        // Email pro v√°≈° seznam (kopie)
        const ccMailOptions = {
            from: 'info@wloom.eu',
            to: ccEmails.join(', '),
            subject: `üìä KOPIE: ${reportData.period} uz√°vƒõrka - ${reportData.storeName}`,
            html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%); color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="margin: 0; font-size: 24px;">üìä KOPIE UZ√ÅVƒöRKY</h1>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">${reportData.storeName} - ${reportData.period} uz√°vƒõrka</p>
          </div>
          
          <div style="background: white; padding: 15px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <h3 style="color: #333; margin-top: 0;">üìã Souhrn</h3>
            <p><strong>Prodejna:</strong> ${reportData.storeName}</p>
            <p><strong>Obdob√≠:</strong> ${reportData.period}</p>
            <p><strong>Datum:</strong> ${reportData.startDate} a≈æ ${reportData.endDate}</p>
            <p><strong>Celkov√° tr≈æba:</strong> ${reportData.totalSales.toLocaleString('cs-CZ')} Kƒç</p>
            <p><strong>Poƒçet z√°kazn√≠k≈Ø:</strong> ${reportData.customerCount}</p>
            <p><strong>Hotovost:</strong> ${reportData.cashSales.toLocaleString('cs-CZ')} Kƒç</p>
            <p><strong>Karty:</strong> ${reportData.cardSales.toLocaleString('cs-CZ')} Kƒç</p>
          </div>
          
          <div style="background: #e9ecef; padding: 20px; text-align: center; border-radius: 0 0 10px 10px;">
            <p style="margin: 0; color: #6c757d; font-size: 12px;">
              Toto je automatick√° kopie uz√°vƒõrky pro ${reportData.storeName}<br>
              <strong>√öƒçt√°rna</strong> - Profesion√°ln√≠ prodejn√≠ syst√©m
            </p>
          </div>
        </div>
      `
        };
        console.log('üìß Sending email to user:', userEmail);
        const userInfo = await transporter.sendMail(userMailOptions);
        console.log('üìß User email sent successfully:', userInfo.messageId);
        console.log('üìß Sending copy to CC list:', ccEmails);
        const ccInfo = await transporter.sendMail(ccMailOptions);
        console.log('üìß CC email sent successfully:', ccInfo.messageId);
    }
    catch (error) {
        console.error('‚ùå Error sending email:', error);
        throw new Error(`Chyba p≈ôi odes√≠l√°n√≠ emailu: ${error.message}`);
    }
}
// HTTP endpoint pro testov√°n√≠
exports.testFunction = functions.https.onRequest((req, res) => {
    res.json({
        message: '√öƒçt√°rna Firebase Functions bƒõ≈æ√≠!',
        timestamp: new Date().toISOString(),
        email: 'SMTP Seznam.cz nakonfigurov√°n'
    });
});
//# sourceMappingURL=index.js.map